/* Generated By:JavaCC: Do not edit this line. X86_64SimParserTokenManager.java */
package x86_64sim.parser;

import x86_64sim.*;
import x86_64sim.instruction.*;

import java.util.ArrayList;
import java.util.List;

/**
 * Token Manager.
 */
@SuppressWarnings("all")
public class X86_64SimParserTokenManager implements X86_64SimParserConstants {

    /**
     * Debug output.
     */
    public java.io.PrintStream debugStream = System.out;

    /**
     * Set debug output.
     */
    public void setDebugStream(java.io.PrintStream ds) {
        debugStream = ds;
    }

    private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1) {
        switch (pos) {
            case 0:
                if ((active0 & 0x2000000000000000L) != 0L)
                    return 12;
                if ((active0 & 0x47c0L) != 0L)
                    return 45;
                if ((active0 & 0xfffffffff8000L) != 0L) {
                    jjmatchedKind = 62;
                    return 33;
                }
                return -1;
            case 1:
                if ((active0 & 0x2000000000000000L) != 0L)
                    return 14;
                if ((active0 & 0xfe087ffff8000L) != 0L) {
                    if (jjmatchedPos != 1) {
                        jjmatchedKind = 62;
                        jjmatchedPos = 1;
                    }
                    return 33;
                }
                if ((active0 & 0x1f7800000000L) != 0L)
                    return 33;
                if ((active0 & 0x200L) != 0L)
                    return 49;
                return -1;
            case 2:
                if ((active0 & 0x439c000000000L) != 0L)
                    return 33;
                if ((active0 & 0xbc007ffff8000L) != 0L) {
                    jjmatchedKind = 62;
                    jjmatchedPos = 2;
                    return 33;
                }
                return -1;
            case 3:
                if ((active0 & 0x9400001cf8000L) != 0L)
                    return 33;
                if ((active0 & 0x28007fe300000L) != 0L) {
                    jjmatchedKind = 62;
                    jjmatchedPos = 3;
                    return 33;
                }
                return -1;
            case 4:
                if ((active0 & 0x220000000L) != 0L) {
                    if (jjmatchedPos != 4) {
                        jjmatchedKind = 62;
                        jjmatchedPos = 4;
                    }
                    return 33;
                }
                if ((active0 & 0x28005de300000L) != 0L)
                    return 33;
                return -1;
            default:
                return -1;
        }
    }

    private final int jjStartNfa_0(int pos, long active0, long active1) {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
    }

    private int jjStopAtPos(int pos, int kind) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }

    private int jjMoveStringLiteralDfa0_0() {
        switch (curChar) {
            case 10:
                return jjStopAtPos(0, 56);
            case 36:
                return jjStopAtPos(0, 55);
            case 37:
                return jjMoveStringLiteralDfa1_0(0x2000000000000000L);
            case 40:
                return jjStopAtPos(0, 52);
            case 41:
                return jjStopAtPos(0, 53);
            case 42:
                return jjStopAtPos(0, 57);
            case 44:
                return jjStopAtPos(0, 54);
            case 46:
                return jjMoveStringLiteralDfa1_0(0x47c0L);
            case 58:
                return jjStopAtPos(0, 66);
            case 97:
                return jjMoveStringLiteralDfa1_0(0x40000L);
            case 99:
                return jjMoveStringLiteralDfa1_0(0x4007fe808000L);
            case 100:
                return jjMoveStringLiteralDfa1_0(0x20000L);
            case 105:
                return jjMoveStringLiteralDfa1_0(0x310000L);
            case 106:
                return jjMoveStringLiteralDfa1_0(0x3ff800000000L);
            case 108:
                return jjMoveStringLiteralDfa1_0(0x1800000000000L);
            case 109:
                return jjMoveStringLiteralDfa1_0(0x1000000L);
            case 112:
                return jjMoveStringLiteralDfa1_0(0x2000000000000L);
            case 114:
                return jjMoveStringLiteralDfa1_0(0x4000000000000L);
            case 115:
                return jjMoveStringLiteralDfa1_0(0x8000000080000L);
            case 120:
                return jjMoveStringLiteralDfa1_0(0x400000L);
            default:
                return jjMoveNfa_0(6, 0);
        }
    }

    private int jjMoveStringLiteralDfa1_0(long active0) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(0, active0, 0L);
            return 1;
        }
        switch (curChar) {
            case 97:
                if ((active0 & 0x40000000000L) != 0L) {
                    jjmatchedKind = 42;
                    jjmatchedPos = 1;
                }
                return jjMoveStringLiteralDfa2_0(active0, 0x8500000000080L);
            case 98:
                if ((active0 & 0x20000000000L) != 0L) {
                    jjmatchedKind = 41;
                    jjmatchedPos = 1;
                }
                return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L);
            case 100:
                return jjMoveStringLiteralDfa2_0(active0, 0x240400L);
            case 101:
                if ((active0 & 0x1000000000L) != 0L)
                    return jjStartNfaWithStates_0(1, 36, 33);
                return jjMoveStringLiteralDfa2_0(active0, 0x5800000020000L);
            case 103:
                if ((active0 & 0x2000000000L) != 0L) {
                    jjmatchedKind = 37;
                    jjmatchedPos = 1;
                }
                return jjMoveStringLiteralDfa2_0(active0, 0x10000000040L);
            case 105:
                return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
            case 108:
                if ((active0 & 0x800000000L) != 0L) {
                    jjmatchedKind = 35;
                    jjmatchedPos = 1;
                }
                return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L);
            case 109:
                return jjMoveStringLiteralDfa2_0(active0, 0x2007fe108000L);
            case 110:
                return jjMoveStringLiteralDfa2_0(active0, 0x8000010000L);
            case 111:
                return jjMoveStringLiteralDfa2_0(active0, 0x1400000L);
            case 113:
                return jjMoveStringLiteralDfa2_0(active0, 0x800100L);
            case 114:
                return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000000L);
            case 116:
                return jjMoveStringLiteralDfa2_0(active0, 0x200L);
            case 117:
                return jjMoveStringLiteralDfa2_0(active0, 0x2000000080000L);
            default:
                break;
        }
        return jjStartNfa_0(0, active0, 0L);
    }

    private int jjMoveStringLiteralDfa2_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(0, old0, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(1, active0, 0L);
            return 2;
        }
        switch (curChar) {
            case 97:
                return jjMoveStringLiteralDfa3_0(active0, 0x1800000000400L);
            case 98:
                return jjMoveStringLiteralDfa3_0(active0, 0x80000L);
            case 99:
                return jjMoveStringLiteralDfa3_0(active0, 0x30000L);
            case 100:
                return jjMoveStringLiteralDfa3_0(active0, 0x44000L);
            case 101:
                if ((active0 & 0x4000000000L) != 0L)
                    return jjStartNfaWithStates_0(2, 38, 33);
                else if ((active0 & 0x8000000000L) != 0L)
                    return jjStartNfaWithStates_0(2, 39, 33);
                else if ((active0 & 0x10000000000L) != 0L)
                    return jjStartNfaWithStates_0(2, 40, 33);
                else if ((active0 & 0x80000000000L) != 0L)
                    return jjStartNfaWithStates_0(2, 43, 33);
                else if ((active0 & 0x100000000000L) != 0L)
                    return jjStartNfaWithStates_0(2, 44, 33);
                return jjMoveStringLiteralDfa3_0(active0, 0x200L);
            case 105:
                return jjMoveStringLiteralDfa3_0(active0, 0x2000000000200000L);
            case 108:
                return jjMoveStringLiteralDfa3_0(active0, 0x4000000000c0L);
            case 111:
                return jjMoveStringLiteralDfa3_0(active0, 0x7fe000000L);
            case 112:
                if ((active0 & 0x200000000000L) != 0L)
                    return jjStartNfaWithStates_0(2, 45, 33);
                return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
            case 114:
                return jjMoveStringLiteralDfa3_0(active0, 0x8000000400000L);
            case 115:
                return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L);
            case 116:
                if ((active0 & 0x4000000000000L) != 0L)
                    return jjStartNfaWithStates_0(2, 50, 33);
                return jjMoveStringLiteralDfa3_0(active0, 0x800000L);
            case 117:
                return jjMoveStringLiteralDfa3_0(active0, 0x100100L);
            case 118:
                return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
            default:
                break;
        }
        return jjStartNfa_0(1, active0, 0L);
    }

    private int jjMoveStringLiteralDfa3_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(1, old0, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(2, active0, 0L);
            return 3;
        }
        switch (curChar) {
            case 97:
                return jjMoveStringLiteralDfa4_0(active0, 0x100L);
            case 101:
                return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
            case 104:
                return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L);
            case 105:
                return jjMoveStringLiteralDfa4_0(active0, 0x80L);
            case 108:
                if ((active0 & 0x400000000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 46, 33);
                return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
            case 111:
                if ((active0 & 0x800000L) != 0L)
                    return jjStartNfaWithStates_0(3, 23, 33);
                return jjMoveStringLiteralDfa4_0(active0, 0x40L);
            case 112:
                if ((active0 & 0x2000000000000000L) != 0L)
                    return jjStopAtPos(3, 61);
                break;
            case 113:
                if ((active0 & 0x8000L) != 0L)
                    return jjStartNfaWithStates_0(3, 15, 33);
                else if ((active0 & 0x10000L) != 0L)
                    return jjStartNfaWithStates_0(3, 16, 33);
                else if ((active0 & 0x20000L) != 0L)
                    return jjStartNfaWithStates_0(3, 17, 33);
                else if ((active0 & 0x40000L) != 0L)
                    return jjStartNfaWithStates_0(3, 18, 33);
                else if ((active0 & 0x80000L) != 0L)
                    return jjStartNfaWithStates_0(3, 19, 33);
                else if ((active0 & 0x400000L) != 0L)
                    return jjStartNfaWithStates_0(3, 22, 33);
                else if ((active0 & 0x1000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 24, 33);
                else if ((active0 & 0x1000000000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 48, 33);
                else if ((active0 & 0x8000000000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 51, 33);
                break;
            case 116:
                return jjMoveStringLiteralDfa4_0(active0, 0x400L);
            case 118:
                return jjMoveStringLiteralDfa4_0(active0, 0x8007fe200000L);
            case 120:
                return jjMoveStringLiteralDfa4_0(active0, 0x200L);
            default:
                break;
        }
        return jjStartNfa_0(2, active0, 0L);
    }

    private int jjMoveStringLiteralDfa4_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(2, old0, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(3, active0, 0L);
            return 4;
        }
        switch (curChar) {
            case 97:
                if ((active0 & 0x400L) != 0L)
                    return jjStopAtPos(4, 10);
                else if ((active0 & 0x100000000L) != 0L) {
                    jjmatchedKind = 32;
                    jjmatchedPos = 4;
                }
                return jjMoveStringLiteralDfa5_0(active0, 0x400000000L);
            case 98:
                return jjMoveStringLiteralDfa5_0(active0, 0x200000040L);
            case 100:
                if ((active0 & 0x100L) != 0L)
                    return jjStopAtPos(4, 8);
                break;
            case 101:
                if ((active0 & 0x4000000L) != 0L)
                    return jjStartNfaWithStates_0(4, 26, 33);
                else if ((active0 & 0x800000000000L) != 0L)
                    return jjStartNfaWithStates_0(4, 47, 33);
                break;
            case 103:
                if ((active0 & 0x8000000L) != 0L) {
                    jjmatchedKind = 27;
                    jjmatchedPos = 4;
                }
                return jjMoveStringLiteralDfa5_0(active0, 0x40000080L);
            case 108:
                if ((active0 & 0x2000000L) != 0L) {
                    jjmatchedKind = 25;
                    jjmatchedPos = 4;
                }
                return jjMoveStringLiteralDfa5_0(active0, 0x90000000L);
            case 110:
                return jjMoveStringLiteralDfa5_0(active0, 0x20004000L);
            case 113:
                if ((active0 & 0x100000L) != 0L)
                    return jjStartNfaWithStates_0(4, 20, 33);
                else if ((active0 & 0x200000L) != 0L)
                    return jjStartNfaWithStates_0(4, 21, 33);
                else if ((active0 & 0x2000000000000L) != 0L)
                    return jjStartNfaWithStates_0(4, 49, 33);
                break;
            case 116:
                if ((active0 & 0x200L) != 0L)
                    return jjStopAtPos(4, 9);
                break;
            default:
                break;
        }
        return jjStartNfa_0(3, active0, 0L);
    }

    private int jjMoveStringLiteralDfa5_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(3, old0, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(4, active0, 0L);
            return 5;
        }
        switch (curChar) {
            case 98:
                if ((active0 & 0x80000000L) != 0L)
                    return jjStartNfaWithStates_0(5, 31, 33);
                break;
            case 101:
                if ((active0 & 0x10000000L) != 0L)
                    return jjStartNfaWithStates_0(5, 28, 33);
                else if ((active0 & 0x20000000L) != 0L)
                    return jjStartNfaWithStates_0(5, 29, 33);
                else if ((active0 & 0x40000000L) != 0L)
                    return jjStartNfaWithStates_0(5, 30, 33);
                else if ((active0 & 0x200000000L) != 0L)
                    return jjStartNfaWithStates_0(5, 33, 33);
                else if ((active0 & 0x400000000L) != 0L)
                    return jjStartNfaWithStates_0(5, 34, 33);
                break;
            case 108:
                if ((active0 & 0x40L) != 0L)
                    return jjStopAtPos(5, 6);
                break;
            case 110:
                if ((active0 & 0x80L) != 0L)
                    return jjStopAtPos(5, 7);
                break;
            case 116:
                if ((active0 & 0x4000L) != 0L)
                    return jjStopAtPos(5, 14);
                break;
            default:
                break;
        }
        return jjStartNfa_0(4, active0, 0L);
    }

    private int jjStartNfaWithStates_0(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_0(state, pos + 1);
    }

    static final long[] jjbitVec0 = {
            0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
    };

    private int jjMoveNfa_0(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 56;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (; ; ) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        case 6:
                            if ((0x3ff000000000000L & l) != 0L) {
                                if (kind > 58)
                                    kind = 58;
                                jjCheckNAdd(10);
                            } else if (curChar == 46)
                                jjAddStates(0, 2);
                            else if (curChar == 34)
                                jjCheckNAddTwoStates(35, 36);
                            else if (curChar == 37)
                                jjstateSet[jjnewStateCnt++] = 12;
                            else if (curChar == 45)
                                jjCheckNAdd(10);
                            else if (curChar == 35) {
                                if (kind > 5)
                                    kind = 5;
                                jjCheckNAdd(8);
                            } else if (curChar == 47)
                                jjstateSet[jjnewStateCnt++] = 0;
                            if ((0x116000000000000L & l) != 0L) {
                                if (kind > 59)
                                    kind = 59;
                            }
                            break;
                        case 14:
                            if ((0x300000000000000L & l) != 0L) {
                                if (kind > 60)
                                    kind = 60;
                            } else if (curChar == 49)
                                jjAddStates(3, 8);
                            break;
                        case 0:
                            if (curChar == 42)
                                jjCheckNAddTwoStates(1, 2);
                            break;
                        case 1:
                            if ((0xfffffbffffffffffL & l) != 0L)
                                jjCheckNAddTwoStates(1, 2);
                            break;
                        case 2:
                            if (curChar == 42)
                                jjCheckNAddStates(9, 11);
                            break;
                        case 3:
                            if ((0xffff7bffffffffffL & l) != 0L)
                                jjCheckNAddTwoStates(4, 2);
                            break;
                        case 4:
                            if ((0xfffffbffffffffffL & l) != 0L)
                                jjCheckNAddTwoStates(4, 2);
                            break;
                        case 5:
                            if (curChar == 47 && kind > 4)
                                kind = 4;
                            break;
                        case 7:
                            if (curChar != 35)
                                break;
                            if (kind > 5)
                                kind = 5;
                            jjCheckNAdd(8);
                            break;
                        case 8:
                            if ((0xfffffffffffffbffL & l) == 0L)
                                break;
                            if (kind > 5)
                                kind = 5;
                            jjCheckNAdd(8);
                            break;
                        case 9:
                            if (curChar == 45)
                                jjCheckNAdd(10);
                            break;
                        case 10:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 58)
                                kind = 58;
                            jjCheckNAdd(10);
                            break;
                        case 11:
                            if ((0x116000000000000L & l) != 0L && kind > 59)
                                kind = 59;
                            break;
                        case 16:
                            if ((0x300000000000000L & l) != 0L && kind > 60)
                                kind = 60;
                            break;
                        case 22:
                            if (curChar == 49)
                                jjAddStates(3, 8);
                            break;
                        case 23:
                            if (curChar == 48 && kind > 60)
                                kind = 60;
                            break;
                        case 24:
                            if (curChar == 49 && kind > 60)
                                kind = 60;
                            break;
                        case 25:
                            if (curChar == 50 && kind > 60)
                                kind = 60;
                            break;
                        case 26:
                            if (curChar == 51 && kind > 60)
                                kind = 60;
                            break;
                        case 27:
                            if (curChar == 52 && kind > 60)
                                kind = 60;
                            break;
                        case 28:
                            if (curChar == 53 && kind > 60)
                                kind = 60;
                            break;
                        case 29:
                            if (curChar == 37)
                                jjstateSet[jjnewStateCnt++] = 12;
                            break;
                        case 31:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 60)
                                kind = 60;
                            jjstateSet[jjnewStateCnt++] = 31;
                            break;
                        case 33:
                            if ((0x3ff401000000000L & l) == 0L)
                                break;
                            if (kind > 62)
                                kind = 62;
                            jjstateSet[jjnewStateCnt++] = 33;
                            break;
                        case 34:
                            if (curChar == 34)
                                jjCheckNAddTwoStates(35, 36);
                            break;
                        case 35:
                            if ((0xfffffffbfffffbffL & l) != 0L)
                                jjCheckNAddTwoStates(35, 36);
                            break;
                        case 36:
                            if (curChar == 34 && kind > 63)
                                kind = 63;
                            break;
                        case 37:
                            if (curChar == 46)
                                jjAddStates(0, 2);
                            break;
                        case 39:
                            if ((0xfffffffffffffbffL & l) == 0L)
                                break;
                            if (kind > 11)
                                kind = 11;
                            jjstateSet[jjnewStateCnt++] = 39;
                            break;
                        case 47:
                            if ((0xfffffffffffffbffL & l) == 0L)
                                break;
                            if (kind > 12)
                                kind = 12;
                            jjstateSet[jjnewStateCnt++] = 47;
                            break;
                        case 52:
                            if ((0xfffffffffffffbffL & l) == 0L)
                                break;
                            if (kind > 13)
                                kind = 13;
                            jjstateSet[jjnewStateCnt++] = 52;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 6:
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 62)
                                    kind = 62;
                                jjCheckNAdd(33);
                            }
                            if (curChar == 116)
                                jjstateSet[jjnewStateCnt++] = 31;
                            break;
                        case 14:
                            if (curChar == 115)
                                jjCheckNAddTwoStates(20, 18);
                            else if (curChar == 100)
                                jjCheckNAddTwoStates(13, 20);
                            else if (curChar == 98)
                                jjCheckNAddTwoStates(13, 18);
                            else if (curChar == 99)
                                jjCheckNAdd(13);
                            else if (curChar == 97)
                                jjCheckNAdd(13);
                            break;
                        case 45:
                            if (curChar == 115)
                                jjstateSet[jjnewStateCnt++] = 54;
                            else if (curChar == 116)
                                jjstateSet[jjnewStateCnt++] = 49;
                            if (curChar == 115)
                                jjstateSet[jjnewStateCnt++] = 44;
                            break;
                        case 1:
                            jjCheckNAddTwoStates(1, 2);
                            break;
                        case 3:
                        case 4:
                            jjCheckNAddTwoStates(4, 2);
                            break;
                        case 8:
                            if (kind > 5)
                                kind = 5;
                            jjstateSet[jjnewStateCnt++] = 8;
                            break;
                        case 12:
                            if (curChar == 114)
                                jjAddStates(12, 18);
                            break;
                        case 13:
                            if (curChar == 120 && kind > 60)
                                kind = 60;
                            break;
                        case 15:
                            if (curChar == 99)
                                jjCheckNAdd(13);
                            break;
                        case 17:
                            if (curChar == 98)
                                jjCheckNAddTwoStates(13, 18);
                            break;
                        case 18:
                            if (curChar == 112 && kind > 60)
                                kind = 60;
                            break;
                        case 19:
                            if (curChar == 100)
                                jjCheckNAddTwoStates(13, 20);
                            break;
                        case 20:
                            if (curChar == 105 && kind > 60)
                                kind = 60;
                            break;
                        case 21:
                            if (curChar == 115)
                                jjCheckNAddTwoStates(20, 18);
                            break;
                        case 30:
                            if (curChar == 116)
                                jjstateSet[jjnewStateCnt++] = 31;
                            break;
                        case 32:
                        case 33:
                            if ((0x7fffffe87fffffeL & l) == 0L)
                                break;
                            if (kind > 62)
                                kind = 62;
                            jjCheckNAdd(33);
                            break;
                        case 35:
                            jjAddStates(19, 20);
                            break;
                        case 38:
                            if (curChar != 110)
                                break;
                            if (kind > 11)
                                kind = 11;
                            jjCheckNAdd(39);
                            break;
                        case 39:
                            if (kind > 11)
                                kind = 11;
                            jjCheckNAdd(39);
                            break;
                        case 40:
                            if (curChar == 111)
                                jjstateSet[jjnewStateCnt++] = 38;
                            break;
                        case 41:
                            if (curChar == 105)
                                jjstateSet[jjnewStateCnt++] = 40;
                            break;
                        case 42:
                            if (curChar == 116)
                                jjstateSet[jjnewStateCnt++] = 41;
                            break;
                        case 43:
                            if (curChar == 99)
                                jjstateSet[jjnewStateCnt++] = 42;
                            break;
                        case 44:
                            if (curChar == 101)
                                jjstateSet[jjnewStateCnt++] = 43;
                            break;
                        case 46:
                            if (curChar != 101)
                                break;
                            if (kind > 12)
                                kind = 12;
                            jjCheckNAdd(47);
                            break;
                        case 47:
                            if (kind > 12)
                                kind = 12;
                            jjCheckNAdd(47);
                            break;
                        case 48:
                            if (curChar == 112)
                                jjstateSet[jjnewStateCnt++] = 46;
                            break;
                        case 49:
                            if (curChar == 121)
                                jjstateSet[jjnewStateCnt++] = 48;
                            break;
                        case 50:
                            if (curChar == 116)
                                jjstateSet[jjnewStateCnt++] = 49;
                            break;
                        case 51:
                            if (curChar != 101)
                                break;
                            if (kind > 13)
                                kind = 13;
                            jjCheckNAdd(52);
                            break;
                        case 52:
                            if (kind > 13)
                                kind = 13;
                            jjCheckNAdd(52);
                            break;
                        case 53:
                            if (curChar == 122)
                                jjstateSet[jjnewStateCnt++] = 51;
                            break;
                        case 54:
                            if (curChar == 105)
                                jjstateSet[jjnewStateCnt++] = 53;
                            break;
                        case 55:
                            if (curChar == 115)
                                jjstateSet[jjnewStateCnt++] = 54;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 1:
                            if ((jjbitVec0[i2] & l2) != 0L)
                                jjCheckNAddTwoStates(1, 2);
                            break;
                        case 3:
                        case 4:
                            if ((jjbitVec0[i2] & l2) != 0L)
                                jjCheckNAddTwoStates(4, 2);
                            break;
                        case 8:
                            if ((jjbitVec0[i2] & l2) == 0L)
                                break;
                            if (kind > 5)
                                kind = 5;
                            jjstateSet[jjnewStateCnt++] = 8;
                            break;
                        case 35:
                            if ((jjbitVec0[i2] & l2) != 0L)
                                jjAddStates(19, 20);
                            break;
                        case 39:
                            if ((jjbitVec0[i2] & l2) == 0L)
                                break;
                            if (kind > 11)
                                kind = 11;
                            jjstateSet[jjnewStateCnt++] = 39;
                            break;
                        case 47:
                            if ((jjbitVec0[i2] & l2) == 0L)
                                break;
                            if (kind > 12)
                                kind = 12;
                            jjstateSet[jjnewStateCnt++] = 47;
                            break;
                        case 52:
                            if ((jjbitVec0[i2] & l2) == 0L)
                                break;
                            if (kind > 13)
                                kind = 13;
                            jjstateSet[jjnewStateCnt++] = 52;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 56 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    static final int[] jjnextStates = {
            45, 50, 55, 23, 24, 25, 26, 27, 28, 2, 3, 5, 14, 15, 16, 17,
            19, 21, 22, 35, 36,
    };

    /**
     * Token literal values.
     */
    public static final String[] jjstrLiteralImages = {
            "", null, null, null, null, null, "\56\147\154\157\142\154",
            "\56\141\154\151\147\156", "\56\161\165\141\144", "\56\164\145\170\164", "\56\144\141\164\141", null,
            null, null, "\56\151\144\145\156\164", "\143\155\160\161", "\151\156\143\161",
            "\144\145\143\161", "\141\144\144\161", "\163\165\142\161", "\151\155\165\154\161",
            "\151\144\151\166\161", "\170\157\162\161", "\143\161\164\157", "\155\157\166\161",
            "\143\155\157\166\154", "\143\155\157\166\145", "\143\155\157\166\147", "\143\155\157\166\154\145",
            "\143\155\157\166\156\145", "\143\155\157\166\147\145", "\143\155\157\166\154\142",
            "\143\155\157\166\141", "\143\155\157\166\142\145", "\143\155\157\166\141\145", "\152\154",
            "\152\145", "\152\147", "\152\154\145", "\152\156\145", "\152\147\145", "\152\142",
            "\152\141", "\152\142\145", "\152\141\145", "\152\155\160", "\143\141\154\154",
            "\154\145\141\166\145", "\154\145\141\161", "\160\165\163\150\161", "\162\145\164",
            "\163\141\162\161", "\50", "\51", "\54", "\44", "\12", "\52", null, null, null, "\45\162\151\160",
            null, null, null, null, "\72",};

    /**
     * Lexer state names.
     */
    public static final String[] lexStateNames = {
            "DEFAULT",
    };
    static final long[] jjtoToken = {
            0xffffffffffffffc1L, 0x4L,
    };
    static final long[] jjtoSkip = {
            0x3eL, 0x0L,
    };
    protected SimpleCharStream input_stream;
    private final int[] jjrounds = new int[56];
    private final int[] jjstateSet = new int[112];
    protected char curChar;

    /**
     * Constructor.
     */
    public X86_64SimParserTokenManager(SimpleCharStream stream) {
        if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
        input_stream = stream;
    }

    /**
     * Constructor.
     */
    public X86_64SimParserTokenManager(SimpleCharStream stream, int lexState) {
        this(stream);
        SwitchTo(lexState);
    }

    /**
     * Reinitialise parser.
     */
    public void ReInit(SimpleCharStream stream) {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    private void ReInitRounds() {
        int i;
        jjround = 0x80000001;
        for (i = 56; i-- > 0; )
            jjrounds[i] = 0x80000000;
    }

    /**
     * Reinitialise parser.
     */
    public void ReInit(SimpleCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    /**
     * Switch to specified lex state.
     */
    public void SwitchTo(int lexState) {
        if (lexState >= 1 || lexState < 0)
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
        else
            curLexState = lexState;
    }

    protected Token jjFillToken() {
        final Token t;
        final String curTokenImage;
        final int beginLine;
        final int endLine;
        final int beginColumn;
        final int endColumn;
        String im = jjstrLiteralImages[jjmatchedKind];
        curTokenImage = (im == null) ? input_stream.GetImage() : im;
        beginLine = input_stream.getBeginLine();
        beginColumn = input_stream.getBeginColumn();
        endLine = input_stream.getEndLine();
        endColumn = input_stream.getEndColumn();
        t = Token.newToken(jjmatchedKind, curTokenImage);

        t.beginLine = beginLine;
        t.endLine = endLine;
        t.beginColumn = beginColumn;
        t.endColumn = endColumn;

        return t;
    }

    int curLexState = 0;
    int defaultLexState = 0;
    int jjnewStateCnt;
    int jjround;
    int jjmatchedPos;
    int jjmatchedKind;

    /**
     * Get the next Token.
     */
    public Token getNextToken() {
        Token matchedToken;
        int curPos = 0;

        EOFLoop:
        for (; ; ) {
            try {
                curChar = input_stream.BeginToken();
            } catch (java.io.IOException e) {
                jjmatchedKind = 0;
                matchedToken = jjFillToken();
                return matchedToken;
            }

            try {
                input_stream.backup(0);
                while (curChar <= 32 && (0x100002200L & (1L << curChar)) != 0L)
                    curChar = input_stream.BeginToken();
            } catch (java.io.IOException e1) {
                continue EOFLoop;
            }
            jjmatchedKind = 0x7fffffff;
            jjmatchedPos = 0;
            curPos = jjMoveStringLiteralDfa0_0();
            if (jjmatchedKind != 0x7fffffff) {
                if (jjmatchedPos + 1 < curPos)
                    input_stream.backup(curPos - jjmatchedPos - 1);
                if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                    matchedToken = jjFillToken();
                    return matchedToken;
                } else {
                    continue EOFLoop;
                }
            }
            int error_line = input_stream.getEndLine();
            int error_column = input_stream.getEndColumn();
            String error_after = null;
            boolean EOFSeen = false;
            try {
                input_stream.readChar();
                input_stream.backup(1);
            } catch (java.io.IOException e1) {
                EOFSeen = true;
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
                if (curChar == '\n' || curChar == '\r') {
                    error_line++;
                    error_column = 0;
                } else
                    error_column++;
            }
            if (!EOFSeen) {
                input_stream.backup(1);
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
            }
            throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
        }
    }

    private void jjCheckNAdd(int state) {
        if (jjrounds[state] != jjround) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }

    private void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }

    private void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    private void jjCheckNAddStates(int start, int end) {
        do {
            jjCheckNAdd(jjnextStates[start]);
        } while (start++ != end);
    }

}
